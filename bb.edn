{:paths ["src"]
 :deps {org.babashka/neil {:local/root "."}
        io.github.borkdude/gh-release-artifact {:git/sha "cf082df46a648178d1904e9cbcb787d8136a35c6"}}
 :tasks {:init (do (defn version [] (str/trim (slurp "version.txt"))))
         :requires ([clojure.string :as str]
                    [selmer.parser :as p]
                    [selmer.util :refer [without-escaping]])
         package-jar {:doc "Prepare jar for packages"
                      :task (do
                              (println "Producing uberjar")
                              (shell "bb --config .build/uberjar.edn
                                      uberjar neil.jar -m babashka.neil"))}
         upload-release {:doc "Upload jar to release"
                         :depends [package-jar]
                         :requires ([borkdude.gh-release-artifact :as ghr])
                         :task (do
                                 (shell "zip neil.zip neil.jar neil")
                                 (ghr/overwrite-asset {:org "rads"
                                                       :repo "neil"
                                                       :file "neil.zip"
                                                       :draft false
                                                       :tag (str "v" (version))}))}
         tag {:doc "Create and push tag"
              :task (do (shell "git tag" (str "v" (version)))
                        (shell "git push --atomic" "origin" "main" (str "v" (version))))}
         update-readme {:task (let [help (:out (shell {:out :string} "./neil"))]
                               (without-escaping
                                (->> (p/render (slurp "README.template.md")
                                               {:help (str/trim help)
                                                :version (slurp "version.txt")})
                                     (spit "README.md"))))}
         bump-version {:task (let [version (-> (slurp "version.txt")
                                               str/trim)
                                   [major minor patch] (str/split version (re-pattern "\\."))
                                   version (str/join "." [major minor (inc (Integer/parseInt patch))])]
                               (spit "version.txt" version)
                               version)}
         sync-version (let [version (-> (slurp "version.txt") str/trim)
                            oldsource (slurp "src/babashka/neil.clj")
                            newsource (str/replace oldsource
                                                   ;; Regex literals like #"\(def version \"[0-9\.]+\"\)" are not supported in bb.edn
                                                   (re-pattern "\\(def version \\\"[0-9\\.]+\\\"\\)")
                                                   (str "(def version \"" version "\")"))]
                        (spit "src/babashka/neil.clj" newsource))
         tests {:depends [package-jar]
                :task (do (load-file "tests.clj")
                          (let [{:keys [error fail]} (clojure.test/run-tests 'tests)]
                            (when (pos? (+ error fail))
                              (throw (ex-info "Tests failed" {:babashka/exit 1})))))}
         tests-emacs {:extra-paths ["."]
                      :requires ([tests-emacs :as te])
                      :task (te/run-tests)}
         publish {:doc "Bumps version, pushes tag"
                  :task
                  (do
                    (run 'tests)
                    (run 'bump-version)
                    (run 'sync-version)
                    (run 'update-readme)
                    (shell "git add .")
                    (let [version (slurp "version.txt")]
                      (shell (format "git commit -m 'Bump version %s'" version))
                      (shell (str "git tag v" version))
                      (shell "git push --atomic origin main"
                             (str "v" version))))}}}
