{:paths ["src" "dev" "test"]
 :pods {org.babashka/fswatcher {:version "0.0.3"}}
 :deps {org.babashka/neil {:local/root "."}}
 :tasks {:requires ([babashka.fs :as fs]
                    [clojure.string :as str]
                    [selmer.parser :as p]
                    [selmer.util :refer [without-escaping]])
         dev {:doc "Starts watcher to auto-build neil script"
              :requires ([babashka.neil.dev :as dev])
              :task (dev/dev)}
         gen-script (let [prelude (slurp "prelude")
                          curl (slurp "src/babashka/neil/curl.clj")
                          git (slurp "src/babashka/neil/git.clj")
                          new (slurp "src/babashka/neil/new.clj")
                          test (slurp "src/babashka/neil/test.cljc")
                          project (slurp "src/babashka/neil/project.clj")
                          rewrite (slurp "src/babashka/neil/rewrite.clj")
                          version (slurp "src/babashka/neil/version.clj")
                          neil (slurp "src/babashka/neil.clj")]
                      (spit "neil" (str/join "\n" [prelude
                                                   curl git rewrite project new test version
                                                   neil])))
         update-readme {:depends [gen-script]
                        :task (let [help (:out (shell {:out :string} "./neil"))]
                               (without-escaping
                                (->> (p/render (slurp "README.template.md")
                                               {:help (str/trim help)
                                                :version (slurp "version.txt")})
                                     (spit "README.md"))))}
         bump-version {:task (let [version (-> (slurp "version.txt")
                                               str/trim)
                                   [major minor patch] (str/split version (re-pattern "\\."))
                                   version (str/join "." [major minor (inc (Integer/parseInt patch))])]
                               (spit "version.txt" version)
                               version)}
         sync-version (let [version (-> (slurp "version.txt") str/trim)
                            oldsource (slurp "src/babashka/neil.clj")
                            newsource (str/replace oldsource
                                                   ;; Regex literals like #"\(def version \"[0-9\.]+\"\)" are not supported in bb.edn
                                                   (re-pattern "\\(def version \\\"[0-9\\.]+\\\"\\)")
                                                   (str "(def version \"" version "\")"))]
                        (spit "src/babashka/neil.clj" newsource))
         tests {:depends [gen-script]
                :requires ([babashka.neil.test-runner])
                :task (exec 'babashka.neil.test-runner/run-tests)}
         tests-emacs {:extra-paths ["."]
                      :requires ([tests-emacs :as te])
                      :task (te/run-tests)}
         publish {:doc "Bumps version, pushes tag"
                  :task
                  (do
                    (run 'tests)
                    (run 'bump-version)
                    (run 'sync-version)
                    (run 'update-readme)
                    (shell "git add .")
                    (let [version (slurp "version.txt")]
                      (shell (format "git commit -m 'Bump version %s'" version))
                      (shell (str "git tag v" version))
                      (shell "git push --atomic origin main"
                             (str "v" version))))}}}
