{:tasks {:requires ([babashka.fs :as fs]
                    [clojure.string :as str]
                    [selmer.parser :as p]
                    [selmer.util :refer [without-escaping]])
         gen-script (let [prelude (slurp "prelude")
                          script (slurp "src/babashka/neil.clj")]
                      (spit "neil" (str/join "\n" [prelude script])))
         update-readme {:depends [gen-script]
                        :task (let [help (:out (shell {:out :string} "./neil"))]
                               (without-escaping
                                (->> (p/render (slurp "README.template.md")
                                               {:help (str/trim help)
                                                :version (slurp "version.txt")})
                                     (spit "README.md"))))}
         bump-version {:depends [gen-script update-readme]
                       :task (let [version (-> (slurp "version.txt")
                                               str/trim)
                                   [major minor patch] (str/split version (re-pattern "\\."))
                                   version (str/join "." [major minor (inc (Integer/parseInt patch))])]
                               (spit "version.txt" version)
                               version)}
         tests {:depends [gen-script]
                :task (do (load-file "tests.clj")
                          (let [{:keys [error fail]} (clojure.test/run-tests 'tests)]
                            (System/exit (if (pos? (+ error fail))
                                           1
                                           0))))}
         publish {:doc "Bumps version, pushes tag"
                  :depends [gen-script tests bump-version]
                  :task
                  (do
                    (shell "git add version.txt")
                    (shell "git commit -m 'Bump version'")
                    (shell (str "git tag v" (slurp "version.txt")))
                    (shell "git push --atomic origin main"
                           (str "v" (slurp "version.txt"))))}}}
